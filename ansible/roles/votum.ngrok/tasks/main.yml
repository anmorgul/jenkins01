---
- name: ngrok | set user
  set_fact:
    ngrok_user: "{{ ansible_ssh_user }}"
  when: ngrok_user is not defined

- name: ngrok | install required packages
  package:
    name: unzip
    state: present

- name: ngrok | check for existing ngrok binary
  stat: "path={{ ngrok_path_bin }}"
  register: ngrok_bin

- include: install.yml
  when: not ngrok_bin.stat.exists

- include: configure-tunnels.yml
  when: ngrok_tunnels | length > 0

- include: service.yml
  when: ngrok_install_as_service and ngrok_tunnels | length > 0

- name: ngrok | create init script
  template:
    src: "start.sh.j2"
    dest: "/home/{{ ngrok_user }}/.ngrok2/start.sh"
    mode: 0755
    force: no

- name: strt ngrok
  become: false
  ansible.builtin.shell: start.sh  > /dev/null &
  # -log=stdout > /dev/null 2>1 &
  #ngrok start --all -config /home/{{ ngrok_user }}/.ngrok2/ngrok.yml -log=stdout >/dev/null 2>1 &
  #ngrok start --all log ./log.log > /dev/null &
  # -log=stdout  > /dev/null &
  args:
    chdir: "/home/{{ ngrok_user }}/.ngrok2/"
  register: result

- name: Check that a page returns a status 200 and fail if the word AWESOME is not in the page contents
  uri:
    url: http://localhost:4040/api/tunnels
    return_content: yes
  register: this

- name: Print return information from the previous task
  ansible.builtin.debug:
    var: this.json.tunnels[0].public_url
    #.public_url
    verbosity: 2

- name: Print ansible_user
  ansible.builtin.debug:
    var: ansible_user
    #.public_url
    verbosity: 2

# - name: get the username running the deploy
#   become: false
#   local_action: command whoami
#   register: username_on_the_host

# - debug: var=username_on_the_host


#content: "{{ this.json.tunnels[0].public_url }}"

#export WEBHOOK_URL="$(curl http://localhost:4040/api/tunnels | jq ".tunnels[0].public_url")"
#- local_action:
- name: copy_url
  become: false
  local_action:
    module: copy 
    content: "{{ this.json.tunnels[0].public_url }}"
    dest: "../.keys/ngrok/ngrok_url"